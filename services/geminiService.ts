
import { GoogleGenAI } from "@google/genai";
import type { AspectRatio } from '../types';

// IMPORTANT SECURITY NOTICE:
// The API key is sourced from `process.env.API_KEY`.
// In a real-world application, this client-side code would be part of a build process
// (like Vite or Create React App) where `process.env.API_KEY` is replaced at build time.
// For maximum security, especially in a public-facing application, this API call
// should be made from a server-side proxy. The client would call your server,
// and your server would securely use its API key to call the Google AI API.
// Never expose your API key directly in client-side code that is publicly accessible.

const apiKey = process.env.API_KEY;
if (!apiKey) {
    console.error("API_KEY environment variable not found. Image generation will fail.");
}
const ai = new GoogleGenAI({ apiKey: apiKey || '' });

export async function generateImageFromPrompt(prompt: string, aspectRatio: AspectRatio): Promise<string> {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/png',
              aspectRatio: aspectRatio,
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/png;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No images were generated by the API.");
        }
    } catch (error) {
        console.error("Error calling Gemini API:", error);
        if (error instanceof Error) {
            // Provide a more user-friendly error message
            if (error.message.includes('API key not valid')) {
                throw new Error('The provided API key is invalid. Please check your configuration.');
            }
            if (error.message.includes('429')) {
                throw new Error('Rate limit exceeded. Please wait a moment and try again.');
            }
        }
        throw new Error("An unexpected error occurred while communicating with the image generation service.");
    }
}
